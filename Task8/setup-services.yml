---
- name: Настройка системы мониторинга и сервисов
  hosts: all
  become: yes
  vars:
    monitor_keyword: "ERROR"
    monitor_logfile: "/var/log/syslog"
    nginx_instances:
      - name: nginx-main
        config: "/etc/nginx/nginx.conf"
        port: 80
      - name: nginx-alt
        config: "/etc/nginx/nginx-alt.conf"
        port: 8080

  tasks:
    - name: Обновление списка пакетов
      apt:
        update_cache: yes

    - name: Установка необходимых пакетов
      apt:
        name:
          - spawn-fcgi
          - nginx
          - python3
          - python3-pip
        state: present

    - name: Создание директории для конфигурации мониторинга
      file:
        path: /etc/default
        state: directory
        mode: 0755

    - name: Создание конфигурационного файла для мониторинга
      copy:
        content: |
          # Конфигурация мониторинга логов
          KEYWORD="{{ monitor_keyword }}"
          LOGFILE="{{ monitor_logfile }}"
          INTERVAL=30
        dest: /etc/default/log-monitor
        mode: 0644

    - name: Создание скрипта мониторинга
      copy:
        content: |
          #!/bin/bash
          # Скрипт мониторинга логов
          source /etc/default/log-monitor

          if [[ -z "$KEYWORD" || -z "$LOGFILE" ]]; then
              echo "Ошибка: KEYWORD или LOGFILE не установлены в /etc/default/log-monitor"
              exit 1
          fi

          if [[ ! -f "$LOGFILE" ]]; then
              echo "Ошибка: Файл лога $LOGFILE не существует"
              exit 1
          fi

          while true; do
              if tail -n 50 "$LOGFILE" | grep -q "$KEYWORD"; then
                  echo "$(date): Обнаружено ключевое слово '$KEYWORD' в $LOGFILE" >> /var/log/monitor-service.log
              fi
              sleep $INTERVAL
          done
        dest: /usr/local/bin/monitor-log.sh
        mode: 0755

    - name: Создание systemd service для мониторинга
      copy:
        content: |
          [Unit]
          Description=Log Monitor Service
          After=network.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/monitor-log.sh
          Restart=always
          RestartSec=10
          User=root
          EnvironmentFile=/etc/default/log-monitor

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/monitor-log.service
        mode: 0644

    - name: Создание unit-файла для spawn-fcgi
      copy:
        content: |
          [Unit]
          Description=Spawn-fcgi service
          After=network.target

          [Service]
          Type=forking
          PIDFile=/var/run/spawn-fcgi.pid
          ExecStart=/usr/bin/spawn-fcgi -a 127.0.0.1 -p 9000 -u www-data -g www-data -f /usr/bin/php-cgi -P /var/run/spawn-fcgi.pid
          ExecStop=/bin/kill -15 $MAINPID
          Restart=on-failure
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/spawn-fcgi.service
        mode: 0644

    - name: Создание дополнительных конфигураций Nginx
      block:
        - name: Создание альтернативной конфигурации Nginx
          copy:
            content: |
              user www-data;
              worker_processes auto;
              pid /run/nginx-alt.pid;

              events {
                  worker_connections 768;
              }

              http {
                  sendfile on;
                  tcp_nopush on;
                  tcp_nodelay on;
                  keepalive_timeout 65;
                  types_hash_max_size 2048;

                  include /etc/nginx/mime.types;
                  default_type application/octet-stream;

                  access_log /var/log/nginx/alt-access.log;
                  error_log /var/log/nginx/alt-error.log;

                  server {
                      listen 8080;
                      listen [::]:8080;

                      root /var/www/html;
                      index index.html index.htm;

                      location / {
                          try_files $uri $uri/ =404;
                      }
                  }
              }
            dest: "{{ item.config }}"
          loop: "{{ nginx_instances }}"
          when: item.name == "nginx-alt"

    - name: Создание systemd служб для каждого инстанса Nginx
      copy:
        content: |
          [Unit]
          Description=nginx - high performance web server for {{ item.name }}
          Documentation=https://nginx.org/en/docs/
          After=network.target

          [Service]
          Type=forking
          PIDFile=/run/nginx-{{ item.name | replace('nginx-', '') }}.pid
          ExecStart=/usr/sbin/nginx -c {{ item.config }}
          ExecReload=/bin/kill -s HUP $MAINPID
          ExecStop=/bin/kill -s TERM $MAINPID
          Restart=on-failure
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: "/etc/systemd/system/{{ item.name }}.service"
      loop: "{{ nginx_instances }}"

    - name: Перезагрузка systemd daemon
      systemd:
        daemon_reload: yes

    - name: Запуск и включение службы мониторинга
      systemd:
        name: monitor-log
        state: started
        enabled: yes

    - name: Запуск и включение spawn-fcgi
      systemd:
        name: spawn-fcgi
        state: started
        enabled: yes

    - name: Запуск и включение инстансов Nginx
      systemd:
        name: "{{ item.name }}"
        state: started
        enabled: yes
      loop: "{{ nginx_instances }}"

    - name: Проверка статуса служб
      command: systemctl status "{{ item }}"
      register: service_status
      loop:
        - monitor-log
        - spawn-fcgi
        - nginx-main
      ignore_errors: yes

    - name: Вывод статуса служб
      debug:
        msg: "Статус {{ item.item }}: {{ item.stdout }}"
      loop: "{{ service_status.results }}"
